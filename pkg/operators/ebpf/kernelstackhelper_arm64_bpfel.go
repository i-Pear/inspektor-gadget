// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package ebpfoperator

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadKernelstackhelper returns the embedded CollectionSpec for kernelstackhelper.
func loadKernelstackhelper() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KernelstackhelperBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kernelstackhelper: %w", err)
	}

	return spec, err
}

// loadKernelstackhelperObjects loads kernelstackhelper and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*kernelstackhelperObjects
//	*kernelstackhelperPrograms
//	*kernelstackhelperMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKernelstackhelperObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKernelstackhelper()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// kernelstackhelperSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kernelstackhelperSpecs struct {
	kernelstackhelperProgramSpecs
	kernelstackhelperMapSpecs
}

// kernelstackhelperSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kernelstackhelperProgramSpecs struct {
	GetKernelStack *ebpf.ProgramSpec `ebpf:"__get_kernel_stack"`
}

// kernelstackhelperMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kernelstackhelperMapSpecs struct {
	KernelStackTraceMap *ebpf.MapSpec `ebpf:"__kernel_stack_trace_map"`
}

// kernelstackhelperObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKernelstackhelperObjects or ebpf.CollectionSpec.LoadAndAssign.
type kernelstackhelperObjects struct {
	kernelstackhelperPrograms
	kernelstackhelperMaps
}

func (o *kernelstackhelperObjects) Close() error {
	return _KernelstackhelperClose(
		&o.kernelstackhelperPrograms,
		&o.kernelstackhelperMaps,
	)
}

// kernelstackhelperMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKernelstackhelperObjects or ebpf.CollectionSpec.LoadAndAssign.
type kernelstackhelperMaps struct {
	KernelStackTraceMap *ebpf.Map `ebpf:"__kernel_stack_trace_map"`
}

func (m *kernelstackhelperMaps) Close() error {
	return _KernelstackhelperClose(
		m.KernelStackTraceMap,
	)
}

// kernelstackhelperPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKernelstackhelperObjects or ebpf.CollectionSpec.LoadAndAssign.
type kernelstackhelperPrograms struct {
	GetKernelStack *ebpf.Program `ebpf:"__get_kernel_stack"`
}

func (p *kernelstackhelperPrograms) Close() error {
	return _KernelstackhelperClose(
		p.GetKernelStack,
	)
}

func _KernelstackhelperClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kernelstackhelper_arm64_bpfel.o
var _KernelstackhelperBytes []byte
